package memoryGame1;

import java.util.Scanner;

/**
 * A simple memory game implemented in Java.
 */
public class gameBoard1 {
    private static final String BOARD =
            "01234" +
            "56789" +
            "01234" +
            "56789";

    private static int score = 0;
    private static final int ROWS = 4;
    private static final int COLS = 5;

    public static void main(String[] args) {
        playGame();
    }

    /**
     * Displays the current state of the game board.
     * @param board The current board state to display.
     */
    public static void displayBoard(String board) {
        System.out.println("\nCurrent Board:");
        for (int i = 0; i < board.length(); i++) {
            if (i > 0 && i % COLS == 0) {
                System.out.println();
            }
            System.out.print(board.charAt(i) + " ");
        }
        System.out.println();
    }

    /**
     * Initiates the memory game and controls the gameplay loop.
     */
    public static void playGame() {
        Scanner scanner = new Scanner(System.in);

        String displayBoard = initializeDisplayBoard();
        displayBoard(displayBoard);

        while (score < (ROWS * COLS) / 2) {

            System.out.print("\nEnter the position of the first card (count 123..etc. from the start): ");
            int pos1 = scanner.nextInt();
            displayBoard = flipCards(displayBoard, pos1, true); // Reveal the number in the selected position
            displayBoard(displayBoard);

            System.out.print("\nEnter the position of the second card (count 123..etc. from the start): ");
            int pos2 = scanner.nextInt();
            displayBoard = flipCards(displayBoard, pos2, true); // Reveal the number in the selected position
            displayBoard(displayBoard);

            if (cardsMatch(pos1, pos2)) {
                System.out.println("Match! You get a point.");
                score++;

                // If it's a match, keep the cards face-up on the board
            } else {
                System.out.println("No match. Try again.");
                // If no match, hide the revealed numbers after a short delay (for demonstration)
                try {
                    Thread.sleep(2000);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
                displayBoard = flipCards(displayBoard, pos1, false);
                displayBoard = flipCards(displayBoard, pos2, false);
            }
        }

        System.out.println("Congratulations! You've matched all the cards. Your score: " + score);
    }

    /**
     * Initializes the display board with hidden cards represented by asterisks.
     * @return The initialized display board.
     */
    public static String initializeDisplayBoard() {
        StringBuilder displayBoard = new StringBuilder();
        for (int i = 0; i < BOARD.length(); i++) {
            displayBoard.append("* ");
        }
        return displayBoard.toString();
    }

    /**
     * Flips a card on the board, revealing or hiding the number based on the reveal flag.
     * @param board The current board state.
     * @param position The position of the card to flip.
     * @param reveal A flag indicating whether to reveal or hide the card.
     * @return The updated board state.
     */
    public static String flipCards(String board, int position, boolean reveal) {
        int index = (position - 1) * 2;

        if (reveal && BOARD.charAt(index) != '*') {
            char cardValue = BOARD.charAt(index); // Get the number in the selected position
            board = board.substring(0, index) + cardValue + board.substring(index + 1);
        } else {
            // If it's not a match, or if the card is already hidden, display *
            board = board.substring(0, index) + "* " + board.substring(index + 2);
        }

        return board;
    }

    /**
     * Checks if two selected cards match.
     * @param pos1 Position of the first card.
     * @param pos2 Position of the second card.
     * @return True if the cards match, otherwise false.
     */
    public static boolean cardsMatch(int pos1, int pos2) {
        return BOARD.charAt((pos1 - 1) * 2) == BOARD.charAt((pos2 - 1) * 2);
    }
}
