package memoryGame;

//Shrishti Roy
/**
 * The MemoryGame class contains the main method to start the game.
 */
public class MemoryGame {
    /**
     * The main method to start the game by calling the startGame method of Cards.
     * @param args Command-line arguments (not used in this program).
     */
    public static void main(String[] args) {
        Cards.startGame();
    }
}

package memoryGame;

import java.util.Scanner;

// Shrishti Roy
/**
 * The GameBoard class represents the game board and its functionalities.
 */
public class GameBoard {
    private static final String BOARD =
            "01234" +
            "56789" +
            "01234" +
            "56789";

    public static final int ROWS = 4;
    public static final int COLS = 5;
    private static int score = 0;

    /**
     * Initializes the display board with hidden cards.
     * @return String representing the initialized display board.
     */
    public static String initializeDisplayBoard() {
        String displayBoard = "";
        for (int i = 0; i < BOARD.length(); i++) {
            displayBoard += "* ";
        }
        return displayBoard;
    }

    //Ashika Gogineni
    /**
     * Flips the card at the specified position on the board.
     * @param board The current state of the board.
     * @param position The position of the card to flip (1-20).
     * @param reveal Indicates whether to reveal the card or hide it.
     * @return Updated board after flipping the card.
     */
    public static String flipCards(String board, int position, boolean reveal) {
        int index = (position - 1) * 2;

        if (index < BOARD.length()) {
            if (reveal && BOARD.charAt(index) != '*') {
                char cardValue = BOARD.charAt(index);
                board = board.substring(0, index) + cardValue + board.substring(index + 1);
            } else {
                board = board.substring(0, index) + "* " + board.substring(index + 2);
            }
        }
        return board;
    }

    /**
     * Checks if the values of cards at two positions match.
     * @param pos1 The position of the first card.
     * @param pos2 The position of the second card.
     * @return True if the cards at the positions match, false otherwise.
     */
    public static boolean cardsMatch(int pos1, int pos2) {
        int index1 = (pos1 - 1) * 2;
        int index2 = (pos2 - 1) * 2;

        if (index1 < BOARD.length() && index2 < BOARD.length()) {
            return BOARD.charAt(index1) == BOARD.charAt(index2);
        }
        return false;
    }

    
    public static int getScore() {
        return score;
    }

    public static void incrementScore() {
        score++;
    }

    // Arshia Gupta
    /**
     * Reads a valid position input from the user.
     * @param scanner Scanner object to read user input.
     * @return Valid position input (1-20).
     */
    public static int readValidPosition(Scanner scanner) {
        int position;
        do {
            System.out.print("Enter a position (1-20): ");
            while (!scanner.hasNextInt()) {
                System.out.println("Please enter a valid number.");
                scanner.next();
            }
            position = scanner.nextInt();
        } while (position < 1 || position > 20);
        return position;
    }
}

package memoryGame;

import java.util.Scanner;

//Eleanor Yang
/**
 * The Cards class is used for revealing the numbers.
 */
public class Cards {
    public static void startGame() {
        Scanner scanner = new Scanner(System.in);
        String displayBoard = GameBoard.initializeDisplayBoard();

        while (GameBoard.getScore() < (GameBoard.ROWS * GameBoard.COLS) / 2) {
            Display.displayBoard(displayBoard);

            int pos1 = GameBoard.readValidPosition(scanner);
            displayBoard = GameBoard.flipCards(displayBoard, pos1, true);
            Display.displayBoard(displayBoard);

            int pos2 = GameBoard.readValidPosition(scanner);
            displayBoard = GameBoard.flipCards(displayBoard, pos2, true);

            if (GameBoard.cardsMatch(pos1, pos2)) {
                System.out.println("Match! You get a point.");
                GameBoard.incrementScore();
            } else {
                System.out.println("No match. Try again.");
                displayBoard = GameBoard.flipCards(displayBoard, pos1, false);
                displayBoard = GameBoard.flipCards(displayBoard, pos2, false);
            }
        }

        System.out.println("Congratulations! You've matched all the cards. Your score: " + GameBoard.getScore());
    }
}

package memoryGame;

/**
 * The Display class handles how the game board looks. 
 */
public class Display {
    private static final int COLS = 5;

    /**
     * Displays the current state of the board.
     * @param board The current state of the board to display.
     */
    public static void displayBoard(String board) {
        System.out.println("\nCurrent Board:");
        for (int i = 0; i < board.length(); i++) {
            if (i > 0 && i % COLS == 0) {
                System.out.println();
            }
            System.out.print(board.charAt(i) + " ");
        }
        System.out.println();
    }
}
