package memoryGame;

import java.util.Scanner;

public class driver {
    public static void main(String[] args) {
        memoryGameBoard gameBoard = new memoryGameBoard();
        Scanner scanner = new Scanner(System.in);

        System.out.println("Welcome to the Memory Game!");
        System.out.println("To reveal a card, enter a letter (a-d) for the row and a number (1-5) for the column.");

        boolean gameOver = false;
        int moves = 0;

        while (!gameOver) {
            System.out.println("\nCurrent Board:");
            gameBoard.printBoard();

            System.out.print("Enter row (a-d) and column (1-5) to reveal a card, or type 'guess' to guess two cards: ");
            String input = scanner.next();
            scanner.nextLine(); // Consume the newline character

            if (input.equalsIgnoreCase("guess")) {
                System.out.print("Enter row (a-d) and column (1-5) for the first card: ");
                String guessInput1 = scanner.nextLine();

                // Check if the input has a valid length
                if (guessInput1.length() > 0) {
                    char rowChar1 = guessInput1.charAt(0);

                    // Check if the input has a valid length before accessing the second character
                    if (guessInput1.length() > 1) {
                        int col1 = Character.getNumericValue(guessInput1.charAt(1)) - 1;
                        System.out.print("Enter row (a-d) and column (1-5) for the second card: ");
                        String guessInput2 = scanner.nextLine();
                        char rowChar2 = guessInput2.charAt(0);
                        int col2 = Character.getNumericValue(guessInput2.charAt(1)) - 1;
                        int row1 = convertRowCharToIndex(rowChar1);
                        int row2 = convertRowCharToIndex(rowChar2);

                        if (isValidRow(rowChar1) && isValidColumn(col1) && isValidRow(rowChar2) && isValidColumn(col2)) {
                            gameBoard.revealCard(row1, col1);
                            gameBoard.revealCard(row2, col2);
                            moves++;

                            if (gameBoard.checkMatch(row1, col1, row2, col2)) {
                                System.out.println("You won! Match found.");
                            } else {
                                System.out.println("Incorrect match. Try again.");
                                // If the cards don't match, hide them again
                                gameBoard.hideCard(row1, col1);
                                gameBoard.hideCard(row2, col2);
                            }
                        } else {
                            System.out.println("Invalid input. Please enter valid rows and columns.");
                        }
                    }
                }
            } else if (input.length() == 2) {
                char rowChar = input.charAt(0);
                int col = Character.getNumericValue(input.charAt(1)) - 1;

                if (isValidRow(rowChar) && isValidColumn(col)) {
                    int row = convertRowCharToIndex(rowChar);
                    gameBoard.revealCard(row, col);
                    moves++;
                } else {
                    System.out.println("Invalid input. Please enter a valid row and column.");
                }
            } else {
                System.out.println("Invalid input. Please enter a valid row and column or type 'guess'.");
            }

            gameOver = checkGameEnd(gameBoard);
        }

        System.out.println("Game Over! You won in " + moves + " moves.");
    }

    private static boolean isValidRow(char rowChar) {
        return rowChar >= 'a' && rowChar <= 'd';
    }

    private static boolean isValidColumn(int col) {
        return col >= 0 && col < 5;
    }

    private static int convertRowCharToIndex(char rowChar) {
        return Character.toUpperCase(rowChar) - 'A';
    }

    private static boolean checkGameEnd(memoryGameBoard gameBoard) {
        memoryGamePiece[][] board = gameBoard.getBoard();
        for (int i = 0; i < board.length; i++) {
            for (int j = 0; j < board[i].length; j++) {
                if (!board[i][j].isRevealed()) {
                    return false;  // At least one unrevealed card is remaining
                }
            }
        }
        return true;  // All cards have been revealed
    }
}
